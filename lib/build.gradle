plugins {
    id "java-library"
    id "org.jetbrains.kotlin.jvm"
    id "org.jlleitschuh.gradle.ktlint" version "${ktlintGradle}"

    // JMH benchmarks
    // id "me.champeau.jmh" version "${champeauJMH}"

    // publishing
    id "maven-publish"
    id "signing"
}

project.ext.artifactId = rootProject.name
archivesBaseName = project.artifactId
ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

kotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}


dependencies {
    implementation "com.google.code.gson:gson:${googleGson}"
    implementation "com.github.multiformats:java-multibase:${javaMultibase}"
    implementation "com.zmannotes:varint:${zmanVarint}"

    testImplementation "org.jetbrains.kotlin:kotlin-test"
    testImplementation "org.junit.jupiter:junit-jupiter-params:${jUnitJupiter}"
}

task group {
    doLast {
        println(project.group)
    }
}

task artifactId {
    doLast {
        println(project.artifactId)
    }
}

task version {
    doLast {
        println(version)
    }
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = "${jvmTarget}"
}

compileTestKotlin {
    kotlinOptions.jvmTarget = "${jvmTarget}"
}

// benchmarks
// jmh {
//     benchmarkMode = ["thrpt", "avgt"]
//     warmupIterations = 0
//     operationsPerInvocation = 1
//     timeUnit = "ms"
//     iterations = 1
//     fork = 1
//     includeTests = true
// }


// publishing

java {
    withJavadocJar()
    withSourcesJar()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifactId = project.artifactId
            pom {
                name = "Peer DID"
                description = "Java/Kotlin Peer DID protocol implementation"
                url = "https://github.com/sicpa-dlab/peer-did-jvm"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    // TODO
                    developer {
                        name = "SICPA"
                        email = "DLCHOpenSourceContrib@sicpa.com"
                    }
                }
                scm {
                    connection = "scm:git:git://sicpa-dlab/peer-did-jvm.git"
                    developerConnection = "scm:git:ssh://sicpa-dlab/peer-did-jvm.git"
                    url = "https://github.com/sicpa-dlab/peer-did-jvm"
                }
            }

        }
    }

    // ORG_GRADLE_PROJECT_mavenOSSRHUsername=<jira-id>
    // ORG_GRADLE_PROJECT_mavenOSSRHPassword=<jira-password>
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"

            name = "mavenOSSRH"
            credentials(PasswordCredentials)
            url = version.endsWith("SNAPSHOT") ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    required { isReleaseVersion }

    // ORG_GRADLE_PROJECT_signingKeyId=<gpg-signingKeyId> - in case of a sub-key
    // ORG_GRADLE_PROJECT_signingKey=<gpg-signingKey>
    // ORG_GRADLE_PROJECT_signingPassword=<gpg-signingPassword>

    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    // NOTE Maven Central doesn't support sub-keys so we have to use primary one
    //def signingKeyId = findProperty("signingKeyId")
    // useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    useInMemoryPgpKeys(signingKey, signingPassword)

    // sign publishing.publications.maven
    sign publishing.publications.mavenJava
}


jar {
    into("META-INF/maven/$project.group/$project.name") {
        from { generatePomFileForMavenJavaPublication }
        rename ".*", "pom.xml"
    }
}

javadoc {
    if(JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption("html5", true)
    }
}
